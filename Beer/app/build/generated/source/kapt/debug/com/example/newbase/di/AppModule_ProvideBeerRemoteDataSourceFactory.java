// Generated by Dagger (https://dagger.dev).
package com.example.newbase.di;

import com.example.newbase.data.dataSource.remote.BeerRemoteDataSource;
import com.example.newbase.data.dataSource.remote.BeerService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideBeerRemoteDataSourceFactory implements Factory<BeerRemoteDataSource> {
  private final Provider<BeerService> beerServiceProvider;

  public AppModule_ProvideBeerRemoteDataSourceFactory(Provider<BeerService> beerServiceProvider) {
    this.beerServiceProvider = beerServiceProvider;
  }

  @Override
  public BeerRemoteDataSource get() {
    return provideBeerRemoteDataSource(beerServiceProvider.get());
  }

  public static AppModule_ProvideBeerRemoteDataSourceFactory create(
      Provider<BeerService> beerServiceProvider) {
    return new AppModule_ProvideBeerRemoteDataSourceFactory(beerServiceProvider);
  }

  public static BeerRemoteDataSource provideBeerRemoteDataSource(BeerService beerService) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideBeerRemoteDataSource(beerService));
  }
}
