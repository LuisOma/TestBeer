// Generated by Dagger (https://dagger.dev).
package com.example.newbase.di;

import com.example.newbase.data.dataSource.remote.BeerRemoteDataSource;
import com.example.newbase.data.repo.BeerRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideBeerRepositoryFactory implements Factory<BeerRepository> {
  private final Provider<BeerRemoteDataSource> remoteDataSourceProvider;

  public AppModule_ProvideBeerRepositoryFactory(
      Provider<BeerRemoteDataSource> remoteDataSourceProvider) {
    this.remoteDataSourceProvider = remoteDataSourceProvider;
  }

  @Override
  public BeerRepository get() {
    return provideBeerRepository(remoteDataSourceProvider.get());
  }

  public static AppModule_ProvideBeerRepositoryFactory create(
      Provider<BeerRemoteDataSource> remoteDataSourceProvider) {
    return new AppModule_ProvideBeerRepositoryFactory(remoteDataSourceProvider);
  }

  public static BeerRepository provideBeerRepository(BeerRemoteDataSource remoteDataSource) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideBeerRepository(remoteDataSource));
  }
}
