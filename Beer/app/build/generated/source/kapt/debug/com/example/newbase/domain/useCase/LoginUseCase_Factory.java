// Generated by Dagger (https://dagger.dev).
package com.example.newbase.domain.useCase;

import com.example.newbase.data.repo.LoginRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LoginUseCase_Factory implements Factory<LoginUseCase> {
  private final Provider<LoginRepository> loginRepositoryProvider;

  public LoginUseCase_Factory(Provider<LoginRepository> loginRepositoryProvider) {
    this.loginRepositoryProvider = loginRepositoryProvider;
  }

  @Override
  public LoginUseCase get() {
    return newInstance(loginRepositoryProvider.get());
  }

  public static LoginUseCase_Factory create(Provider<LoginRepository> loginRepositoryProvider) {
    return new LoginUseCase_Factory(loginRepositoryProvider);
  }

  public static LoginUseCase newInstance(LoginRepository loginRepository) {
    return new LoginUseCase(loginRepository);
  }
}
