// Generated by Dagger (https://dagger.dev).
package com.example.newbase.di;

import com.example.newbase.data.dataSource.local.sharedPrefs.LoginDataSource;
import com.example.newbase.data.repo.LoginRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideLoginRepositoryFactory implements Factory<LoginRepository> {
  private final Provider<LoginDataSource> loginDataSourceProvider;

  public AppModule_ProvideLoginRepositoryFactory(
      Provider<LoginDataSource> loginDataSourceProvider) {
    this.loginDataSourceProvider = loginDataSourceProvider;
  }

  @Override
  public LoginRepository get() {
    return provideLoginRepository(loginDataSourceProvider.get());
  }

  public static AppModule_ProvideLoginRepositoryFactory create(
      Provider<LoginDataSource> loginDataSourceProvider) {
    return new AppModule_ProvideLoginRepositoryFactory(loginDataSourceProvider);
  }

  public static LoginRepository provideLoginRepository(LoginDataSource loginDataSource) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideLoginRepository(loginDataSource));
  }
}
