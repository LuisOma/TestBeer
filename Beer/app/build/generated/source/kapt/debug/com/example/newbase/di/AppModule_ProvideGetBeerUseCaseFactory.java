// Generated by Dagger (https://dagger.dev).
package com.example.newbase.di;

import com.example.newbase.data.repo.BeerRepository;
import com.example.newbase.domain.useCase.GetBeerUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideGetBeerUseCaseFactory implements Factory<GetBeerUseCase> {
  private final Provider<BeerRepository> beerRepositoryProvider;

  public AppModule_ProvideGetBeerUseCaseFactory(Provider<BeerRepository> beerRepositoryProvider) {
    this.beerRepositoryProvider = beerRepositoryProvider;
  }

  @Override
  public GetBeerUseCase get() {
    return provideGetBeerUseCase(beerRepositoryProvider.get());
  }

  public static AppModule_ProvideGetBeerUseCaseFactory create(
      Provider<BeerRepository> beerRepositoryProvider) {
    return new AppModule_ProvideGetBeerUseCaseFactory(beerRepositoryProvider);
  }

  public static GetBeerUseCase provideGetBeerUseCase(BeerRepository beerRepository) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideGetBeerUseCase(beerRepository));
  }
}
