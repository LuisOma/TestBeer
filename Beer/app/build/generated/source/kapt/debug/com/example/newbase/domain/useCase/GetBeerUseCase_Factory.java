// Generated by Dagger (https://dagger.dev).
package com.example.newbase.domain.useCase;

import com.example.newbase.data.repo.BeerRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GetBeerUseCase_Factory implements Factory<GetBeerUseCase> {
  private final Provider<BeerRepository> beerRepositoryProvider;

  public GetBeerUseCase_Factory(Provider<BeerRepository> beerRepositoryProvider) {
    this.beerRepositoryProvider = beerRepositoryProvider;
  }

  @Override
  public GetBeerUseCase get() {
    return newInstance(beerRepositoryProvider.get());
  }

  public static GetBeerUseCase_Factory create(Provider<BeerRepository> beerRepositoryProvider) {
    return new GetBeerUseCase_Factory(beerRepositoryProvider);
  }

  public static GetBeerUseCase newInstance(BeerRepository beerRepository) {
    return new GetBeerUseCase(beerRepository);
  }
}
